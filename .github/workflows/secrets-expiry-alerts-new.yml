name: Secret Expiry Alert

# This script will check the expiry of the secrets in the repository, environments, and organization level.
# It will print/send alerts for the secrets that are expiring or have expired (assuming secrets expire after 90 days).

on:
  schedule:
    - cron: "0 0 * * *" # Runs daily at midnight
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  check_secrets:
    runs-on: ubuntu-latest
    env:
      # GitHub token with required permissions for accessing secrets
      GH_TOKEN: ${{ secrets.GH_TOKEN }} # Set the GH_UAR_TOKEN environment variable
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Set the Slack webhook URL environment variable
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jq requests

      # Get repository-level secrets
      - name: Retrieve Repository Secrets
        run: |
          gh api repos/${{ github.repository }}/actions/secrets --paginate > secrets.json

      # Process repository secrets and check expiry
      - name: Check and print expiring or expired Repository secrets
        run: |
          python - << 'EOF'
          import json
          from datetime import datetime, timedelta
          import requests
          import os

          def send_slack_alert(message):
              webhook_url = os.getenv("SLACK_WEBHOOK_URL")
              payload = {"text": message}
              response = requests.post(webhook_url, json=payload)
              if response.status_code != 200:
                  raise ValueError(f"Request to Slack returned an error {response.status_code}, the response is:\n{response.text}")

          def check_secrets(file_path, expiry_days=90):
              try:
                  with open(file_path, 'r') as file:
                      secrets_data = json.load(file)

                  print(f"Total Repository secrets count: {secrets_data['total_count']}")

                  expiring_secrets = []
                  for secret in secrets_data['secrets']:
                      name = secret['name']
                      created_at = secret['created_at']
                      updated_at = secret['updated_at']
                      print(f"Name: {name}, Created At: {created_at}, Updated At: {updated_at}")
                      created_at = datetime.strptime(created_at, '%Y-%m-%dT%H:%M:%SZ')
                      expiry_date = created_at + timedelta(days=expiry_days)
                      today = datetime.now()
                      if expiry_date <= today:
                          expiring_secrets.append(f"Repository Secret {name} has expired or is expiring today (Expiry Date: {expiry_date.strftime('%Y-%m-%d')}).")

                  if expiring_secrets:
                      message = "\n".join(expiring_secrets)
                      print("Expiring Repository Secrets:\n" + message)
                      #send_slack_alert(message)  will enable this later
              except Exception as e:
                  print(f"Error processing Repository secrets: {e}")

          check_secrets('secrets.json')
          EOF

      - name: Get Environments Secrets
        run: |
          gh api repos/${{ github.repository }}/environments > environments.json

      - name: Print Environment Secrets
        run: |
          python - << 'EOF'
          import json
          import subprocess
          import os
          from datetime import datetime, timedelta
          import requests

          def send_slack_alert(message):
              webhook_url = os.getenv("SLACK_WEBHOOK_URL")
              payload = {"text": message}
              response = requests.post(webhook_url, json=payload)
              if response.status_code != 200:
                  raise ValueError(f"Request to Slack returned an error {response.status_code}, the response is:\n{response.text}")

          def check_secrets(file_path, expiry_days=90):
              try:
                  with open(file_path, 'r') as file:
                      secrets_data = json.load(file)

                  print(f"Total Environments secrets count: {secrets_data['total_count']}")

                  expiring_secrets = []
                  for secret in secrets_data['secrets']:
                      name = secret['name']
                      created_at = secret['created_at']
                      updated_at = secret['updated_at']
                      print(f"Name: {name}, Created At: {created_at}, Updated At: {updated_at}")
                      created_at = datetime.strptime(created_at, '%Y-%m-%dT%H:%M:%SZ')
                      expiry_date = created_at + timedelta(days=expiry_days)
                      today = datetime.now()
                      if expiry_date <= today:
                          expiring_secrets.append(f"Environments Secret {name} has expired or is expiring today (Expiry Date: {expiry_date.strftime('%Y-%m-%d')}).")

                  if expiring_secrets:
                      message = "\n".join(expiring_secrets)
                      print("Expiring Environments Secrets:\n" + message)
                      #send_slack_alert(message)  will enable alerts later
              except Exception as e:
                  print(f"Error processing Environments secrets: {e}")

          try:
              with open('environments.json', 'r') as file:
                  environments_data = json.load(file)

              if 'environments' in environments_data:
                  for environment in environments_data['environments']:
                      name = environment.get('name', 'No name found')
                      print(f"Environment Name: {name}")
                      secrets_file_path = f"secrets_{name.replace(' ', '_')}.json"
                      command = f"gh api repos/${{ github.repository }}/environments/{name}/secrets --paginate"
                      result = subprocess.run(command, shell=True, check=False, executable='/bin/bash', capture_output=True, text=True)

                      if result.returncode == 0:
                          with open(secrets_file_path, 'w') as f:
                              f.write(result.stdout)
                          check_secrets(secrets_file_path)
                      else:
                          print(f"Failed to retrieve secrets for environment: {name}")
                          print(f"Error: {result.stderr}")
              else:
                  print("No environments found.")
          except Exception as e:
              print(f"Error retrieving environment secrets: {e}")
          EOF

      - name: Retrieve Organization Secrets
        run: |
          gh api orgs/${{ github.repository_owner }}/actions/secrets --paginate > org_secrets.json

      - name: Check and print organization secrets
        run: |
          python - << 'EOF'
          import json
          from datetime import datetime, timedelta
          import requests
          import os

          def send_slack_alert(message):
              webhook_url = os.getenv("SLACK_WEBHOOK_URL")
              payload = {"text": message}
              response = requests.post(webhook_url, json=payload)
              if response.status_code != 200:
                  raise ValueError(f"Request to Slack returned an error {response.status_code}, the response is:\n{response.text}")

          def check_secrets(file_path, expiry_days=90):
              try:
                  with open(file_path, 'r') as file:
                      secrets_data = json.load(file)

                  print(f"Total Organization Secrets count: {secrets_data['total_count']}")

                  expiring_secrets = []
                  for secret in secrets_data['secrets']:
                      name = secret['name']
                      created_at = secret.get('created_at', 'No creation date')
                      updated_at = secret.get('updated_at', 'No update date')
                      visibility = secret.get('visibility', 'No visibility info')
                      print(f"Name: {name}, Created At: {created_at}, Updated At: {updated_at}, Visibility: {visibility}")
                      if created_at != 'No creation date':
                          created_at = datetime.strptime(created_at, '%Y-%m-%dT%H:%M:%SZ')
                          expiry_date = created_at + timedelta(days=expiry_days)
                          today = datetime.now()
                          if expiry_date <= today:
                              expiring_secrets.append(f"Organization Secret {name} has expired or is expiring today (Expiry Date: {expiry_date.strftime('%Y-%m-%d')}).")

                  if expiring_secrets:
                      message = "\n".join(expiring_secrets)
                      print("Expiring Organization Secrets:\n" + message)
                      #send_slack_alert(message) will enable slack alerts later
              except Exception as e:
                  print(f"Error processing Organization secrets: {e}")

          check_secrets('org_secrets.json')
          EOF
