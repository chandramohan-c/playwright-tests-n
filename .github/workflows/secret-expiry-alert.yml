name: Secret Expiry Alert

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  check_secrets:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }} # Set the GH_TOKEN environment variable
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jq

      - name: Retrieve GitHub Secrets
        run: |
          gh api repos/${{ github.repository }}/actions/secrets --paginate > secrets.json

      - name: Check and print expiring or expired secrets
        run: |
          python - << 'EOF'
          import json
          from datetime import datetime, timedelta 

          # Path to the secrets.json file
          file_path = 'secrets.json'

          # Load the JSON data from the file
          with open(file_path, 'r') as file:
              secrets_data = json.load(file)

          # Print total_count
          print(f"Total count: {secrets_data['total_count']}")

          # Print details of each secret
          for secret in secrets_data['secrets']:
              name = secret['name']
              created_at = secret['created_at']
              updated_at = secret['updated_at']
              print(f"Name: {name}, Created At: {created_at}, Updated At: {updated_at}")
              # Assuming secrets expire after 90 days
              created_at = datetime.strptime(created_at, '%Y-%m-%dT%H:%M:%SZ')
              expiry_date = created_at + timedelta(days=90)
              today = datetime.now()
              if expiry_date <= today:
                  print(f"Secret {name} has expired or is expiring today (Expiry Date: {expiry_date.strftime('%Y-%m-%d')}).")                    
          EOF
      
      - name: List All Environments
        run: |
          gh api repos/${{ github.repository }}/environments > environments.json
          

      - name: Print Environment Secrets
        run: |
          python - << 'EOF'
          import json
          import subprocess
          import os

          # Path to the environments.json file
          file_path = 'environments.json'

          # Load the JSON data from the file
          with open(file_path, 'r') as file:
              environments_data = json.load(file)

          # Check if the JSON has the correct structure
          if 'environments' in environments_data:
              # Loop through each environment and retrieve secrets
              for environment in environments_data['environments']:
                  name = environment.get('name', 'No name found')  # Use .get() to avoid KeyError
                  print(f"Environment Name: {name}")

                  # Replace spaces in file path
                  secrets_file_path = f"secrets_{name.replace(' ', '_')}.json"

                  # Construct and execute the command
                  command = f"gh api repos/${{ github.repository }}/environments/{name}/secrets --paginate -o {secrets_file_path}"
                  result = subprocess.run(command, shell=True, check=False, executable='/bin/bash')
                  
                  # Check if the command was successful
                  if result.returncode == 0:
                      # Load and print secrets for the environment
                      with open(secrets_file_path, 'r') as secrets_file:
                          secrets_data = json.load(secrets_file)
                          if 'secrets' in secrets_data:
                              for secret in secrets_data['secrets']:
                                  secret_name = secret.get('name', 'No name found')
                                  created_at = secret.get('created_at', 'No creation date found')
                                  updated_at = secret.get('updated_at', 'No update date found')
                                  print(f"Secret Name: {secret_name}, Created At: {created_at}, Updated At: {updated_at}

                                 # Assuming secrets expire after 90 days
                                 created_at = datetime.strptime(created_at, '%Y-%m-%dT%H:%M:%SZ')
                                 expiry_date = created_at + timedelta(days=90)
                                 today = datetime.now()
                                 if expiry_date <= today:
                                 print(f"Secret {name} has expired or is expiring today (Expiry Date: {expiry_date.strftime('%Y-%m-%d')}).")
                                else:
                                    print("No secrets found for this environment.")
                  else:
                      print(f"Failed to retrieve secrets for environment: {name}")
          else:
              print("No environments found.")
          EOF
